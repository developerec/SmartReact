{"version":3,"sources":["components/Launcher.js","FhirClientContext.js","components/FhirClientProvider.js","components/Patient.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Launcher","SMART","authorize","clientId","scope","redirectUri","iss","completeInTarget","React","Component","context","client","setClient","FhirClientContext","createContext","FhirClientProvider","props","state","error","setState","this","message","Provider","value","Consumer","children","ready","then","catch","PatientName","name","entry","find","nameRecord","use","given","join","family","PatientBanner","patient","gender","birthDate","Patient","loading","_loader","read","Page","contextType","App","className","path","component","Home","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"kOAYqBA,E,4LAObC,SAAMC,UAAU,CACZC,SAAU,uCACVC,MAAO,oDAEPC,YAAa,+CACbC,IAAK,gFAYLC,kBAAkB,M,+BAOtB,MAAO,mB,GA/BuBC,IAAMC,WCVtCC,EAAU,CACZC,OAAQ,KACRC,UAAW,SAASD,GAChBD,EAAQC,OAASA,IAIZE,EAAoBL,IAAMM,cAAcJ,GCLhCK,E,YACjB,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTN,OAAQ,KACRO,MAAO,MAEX,EAAKN,UAAY,SAAAD,GAAM,OAAI,EAAKQ,SAAS,CAAER,YAN5B,E,sEAST,IAAD,OACL,OAAIS,KAAKH,MAAMC,MACJ,6BAAME,KAAKH,MAAMC,MAAMG,SAG9B,kBAACR,EAAkBS,SAAnB,CACIC,MAAO,CACHZ,OAAQS,KAAKH,MAAMN,OACnBC,UAAWQ,KAAKR,YAGpB,kBAACC,EAAkBW,SAAnB,MACK,YACG,OADa,EAAbb,OAOO,EAAKK,MAAMS,UALdxB,SAAMyB,QACDC,MAAK,SAAAhB,GAAM,OAAI,EAAKQ,SAAS,CAAER,cAC/BiB,OAAM,SAAAV,GAAK,OAAI,EAAKC,SAAS,CAAED,aAC7B,c,GA3BaV,IAAMC,WCDtD,SAASoB,EAAT,GAAqC,IAAD,IAAbC,YAAa,MAAN,GAAM,EAC5BC,EACAD,EAAKE,MAAK,SAAAC,GAAU,MAAuB,aAAnBA,EAAWC,QAAuBJ,EAAK,GACnE,OAAKC,EAGE,4BAAKA,EAAMI,MAAMC,KAAK,KAAO,IAAML,EAAMM,QAFrC,uCAKf,SAASC,EAAcC,GACnB,OACI,6BACI,kBAACV,EAAD,CAAaC,KAAMS,EAAQT,OAC3B,yCACY,2BAAIS,EAAQC,QADxB,IACqC,KAErC,sCACS,2BAAID,EAAQE,a,IAMZC,E,YAEjB,WAAY1B,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACT0B,SAAS,EACTJ,QAAS,KACTrB,MAAO,MALI,E,iFAQE,IAAD,OACVP,EAASS,KAAKV,QAAQC,OAC5BS,KAAKwB,QAAUjC,EAAO4B,QACjBM,OACAlB,MAAK,SAAAY,GACF,EAAKpB,SAAS,CAAEoB,UAASI,SAAS,EAAOzB,MAAO,UAEnDU,OAAM,SAAAV,GACH,EAAKC,SAAS,CAAED,QAAOyB,SAAS,S,+BAGlC,IAAD,EAC+BvB,KAAKH,MAAjCC,EADH,EACGA,MAAOyB,EADV,EACUA,QAASJ,EADnB,EACmBA,QACxB,OAAII,EACO,KAEPzB,EACOA,EAAMG,QAEV,kBAACiB,EAAkBC,O,GA7BG/B,IAAMC,WCjB5B,SAASqC,IACpB,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,MACA,8BDaSJ,EACVK,YAAclC,EEXVmC,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACM,kBAAC,IAAD,CAAOC,KAAK,OAAOC,UAAWC,IAC9B,kBAAC,IAAD,CAAOF,KAAK,IAAIC,UAAWnD,EAAUqD,OAAK,KAHlD,SCIgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAActC,MAAMC,MAAK,SAAAsC,GACjCA,EAAaC,iB","file":"static/js/main.a4be48aa.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { oauth2 as SMART } from \"fhirclient\";\r\n\r\n/**\r\n * Typically the launch page is an empty page with a `SMART.authorize`\r\n * call in it.\r\n *\r\n * This example demonstrates that the call to authorize can be postponed\r\n * and called manually. In this case we use ReactRouter which will match\r\n * the `/launch` path and render our component. Then, after our page is\r\n * rendered we start the auth flow.\r\n */\r\nexport default class Launcher extends React.Component {\r\n    /**\r\n     * This is configured to make a Standalone Launch, just in case it\r\n     * is loaded directly. An EHR can still launch it by passing `iss`\r\n     * and `launch` url parameters\r\n     */\r\n    componentDidMount() {\r\n        SMART.authorize({\r\n            clientId: \"894feb34-37f7-41d0-b43e-dd261c9d5e76\",\r\n            scope: \"launch launch/patient patient/read offline_access\",\r\n            // redirectUri: \"./app\",\r\n            redirectUri: \"https://developerec.github.io/SmartReact/app\",\r\n            iss: \"https://fhir-ehr.sandboxcerner.com/dstu2/0b8a0111-e8e6-4c26-a91c-5069cbc6b1ca\",\r\n            // iss:\r\n            //     \"https://launch.smarthealthit.org/v/r3/sim/\" +\r\n            //     \"eyJoIjoiMSIsImIiOiJmMDQ2MjkzNi1lYjRiLTRkYT\" +\r\n            //     \"EtYjQ1YS1mYmQ5NmViZjhjY2IiLCJlIjoic21hcnQt\" +\r\n            //     \"UHJhY3RpdGlvbmVyLTcxNjE0NTAyIn0/fhir\",\r\n\r\n            // WARNING: completeInTarget=true is needed to make this work\r\n            // in the codesandbox frame. It is otherwise not needed if the\r\n            // target is not another frame or window but since the entire\r\n            // example works in a frame here, it gets confused without\r\n            // setting this!\r\n            completeInTarget: true\r\n        });\r\n    }\r\n    /**\r\n     * Could also return `null` for empty page\r\n     */\r\n    render() {\r\n        return \"Launching...\";\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nconst context = {\r\n    client: null,\r\n    setClient: function(client) {\r\n        context.client = client;\r\n    }\r\n};\r\n\r\nexport const FhirClientContext = React.createContext(context);","import React from \"react\";\r\nimport { oauth2 as SMART } from \"fhirclient\";\r\nimport { FhirClientContext } from \"../FhirClientContext\";\r\n\r\nexport default class FhirClientProvider extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            client: null,\r\n            error: null\r\n        };\r\n        this.setClient = client => this.setState({ client });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <pre>{this.state.error.message}</pre>;\r\n        }\r\n        return (\r\n            <FhirClientContext.Provider\r\n                value={{\r\n                    client: this.state.client,\r\n                    setClient: this.setClient\r\n                }}\r\n            >\r\n                <FhirClientContext.Consumer>\r\n                    {({ client }) => {\r\n                        if (!client) {\r\n                            SMART.ready()\r\n                                .then(client => this.setState({ client }))\r\n                                .catch(error => this.setState({ error }));\r\n                            return null;\r\n                        }\r\n                        return this.props.children;\r\n                    }}\r\n                </FhirClientContext.Consumer>\r\n            </FhirClientContext.Provider>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { FhirClientContext } from \"../FhirClientContext\";\r\n\r\nfunction PatientName({ name = [] }) {\r\n    let entry =\r\n        name.find(nameRecord => nameRecord.use === \"official\") || name[0];\r\n    if (!entry) {\r\n        return <h1>No Name</h1>;\r\n    }\r\n    return <h1>{entry.given.join(\" \") + \" \" + entry.family}</h1>;\r\n}\r\n\r\nfunction PatientBanner(patient) {\r\n    return (\r\n        <div>\r\n            <PatientName name={patient.name} />\r\n            <span>\r\n                Gender: <b>{patient.gender}</b>,{\" \"}\r\n            </span>\r\n            <span>\r\n                DOB: <b>{patient.birthDate}</b>\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default class Patient extends React.Component {\r\n    static contextType = FhirClientContext;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loading: true,\r\n            patient: null,\r\n            error: null\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        const client = this.context.client;\r\n        this._loader = client.patient\r\n            .read()\r\n            .then(patient => {\r\n                this.setState({ patient, loading: false, error: null });\r\n            })\r\n            .catch(error => {\r\n                this.setState({ error, loading: false });\r\n            });\r\n    }\r\n    render() {\r\n        const { error, loading, patient } = this.state;\r\n        if (loading) {\r\n            return null;\r\n        }\r\n        if (error) {\r\n            return error.message;\r\n        }\r\n        return <PatientBanner {...patient} />;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport FhirClientProvider from \"./FhirClientProvider\";\r\n//import Chart from \"./Chart\";\r\nimport Patient from \"./Patient\";\r\n\r\n/**\r\n * Wraps everything into `FhirClientProvider` so that any component\r\n * can have access to the fhir client through the context.\r\n */\r\nexport default function Page() {\r\n    return (\r\n        <FhirClientProvider>\r\n            <Patient />\r\n            <hr />\r\n        </FhirClientProvider>\r\n    );\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport Launcher from \"./components/Launcher\";\nimport Home from \"./components/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n            <Route path=\"/app\" component={Home} />\n            <Route path=\"/\" component={Launcher} exact />\n        </BrowserRouter>    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}